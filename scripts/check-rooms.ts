// scripts/check-rooms.ts - V√©rifier l'√©tat des salles et cours
import "dotenv/config";
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SECRET_KEY!;
const sb = createClient(supabaseUrl, supabaseServiceKey);

async function checkRooms() {
  console.log("üîç V√©rification des salles et cours...");

  try {
    // R√©cup√©rer toutes les salles
    const { data: rooms, error: roomsError } = await sb.from("rooms").select("id, name");

    if (roomsError) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des salles:", roomsError);
      return;
    }

    console.log(`üè´ ${rooms?.length} salles trouv√©es:`);
    rooms?.forEach(room => {
      console.log(`   - ${room.name} (${room.id})`);
    });

    // R√©cup√©rer tous les cours avec leurs salles
    const { data: courses, error: coursesError } = await sb.from("courses").select(`
        id, name, status, schedule, room_id,
        rooms(id, name)
      `);

    if (coursesError) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des cours:", coursesError);
      return;
    }

    console.log(`\nüìö ${courses?.length} cours trouv√©s:`);
    courses?.forEach(course => {
      console.log(`   - ${course.name}:`);
      console.log(`     Status: ${course.status}`);
      console.log(`     Schedule: "${course.schedule}"`);
      console.log(`     Room ID: ${course.room_id || "null"}`);
      console.log(`     Room Name: ${(course.rooms as any)?.name || "Non assign√©e"}`);
    });

    // Compter les cours par salle
    const roomCounts = courses?.reduce(
      (acc, course) => {
        const roomName = (course.rooms as any)?.name || "Non assign√©e";
        acc[roomName] = (acc[roomName] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>
    );

    console.log(`\nüìä R√©partition par salle:`);
    Object.entries(roomCounts || {}).forEach(([room, count]) => {
      console.log(`   - ${room}: ${count} cours`);
    });
  } catch (error) {
    console.error("üí• Erreur critique:", error);
  }
}

checkRooms().catch(e => {
  console.error(e);
  process.exit(1);
});
